#include <windows.h>
#include <GL/glut.h>
#include <stdlib.h>
#include <math.h>

const int font1=(int)GLUT_BITMAP_TIMES_ROMAN_24;
const int font2=(int)GLUT_BITMAP_TIMES_ROMAN_10;

double refreshMills = 100;
double cameraX = 0.0;
double cameraY = 0.0;
//double cameraZ = 0.0;
double rotateX = 0.0;
double rotateY = 0.0;
double rotateZ = 0.0;
float zoom = -6.0;
float camMoveX = 0.0;
float camMoveY = 0.0;

float posY = 0.4;

#define MAX_PARTICLES 1000


float slowdown = 2.0;
float velocity = 0.0;
//float zoom = -6.0;

int loop;

struct particles
{
    bool alive;
    float life;
    float fade;

    float xpos;
    float ypos;
    float zpos;

    float vel;
    float gravity;
};

particles par_sys[MAX_PARTICLES];

void initParticles(int i)
{
    par_sys[i].alive = true;
    par_sys[i].life = 1.0;
    par_sys[i].fade = float(rand()%100)/1000.0f+0.003f;

    par_sys[i].xpos = (float) (rand() % 50) - 25;
    par_sys[i].ypos = 20.0;
    par_sys[i].zpos = (float) (rand() % 30) - 10;

    par_sys[i].vel = velocity;
    par_sys[i].gravity = 1.0;

}

void Init( )
{
    glShadeModel(GL_SMOOTH);
    glClearDepth(1.0);
    glEnable(GL_DEPTH_TEST);

    for (loop = 0; loop < MAX_PARTICLES; loop++)
    {
        initParticles(loop);
    }
}

void drawSnow()
{
  float x, y, z;
  for (loop = 0; loop < MAX_PARTICLES; loop++)
  {
    if (par_sys[loop].alive == true)
    {
      x = par_sys[loop].xpos;
      y = par_sys[loop].ypos;
      z = par_sys[loop].zpos + zoom;

      glDisable( GL_LIGHTING );
      glColor3f(1.0, 1.0, 1.0);
      glPushMatrix();
      glTranslatef(x, y, z);
      glutSolidSphere(0.2, 16, 16);
      glPopMatrix();

      par_sys[loop].ypos += par_sys[loop].vel / (slowdown*1000);
      par_sys[loop].vel -= par_sys[loop].gravity;

      par_sys[loop].life -= par_sys[loop].fade;

      if (par_sys[loop].life < 0.0)
      {
        initParticles(loop);
      }
    }
  }
}

void init()
{
    glClearColor(0.0f, 0.5f, 2.0f, 0.0f);
    GLfloat mat_specular[]={1.0f, 1.0f, 1.0f, 1.0f} ;
    GLfloat mat_diffuse[]={1.0f, 1.0f, 1.0f, 1.0f};
    GLfloat mat_ambient[]={0.2f, 0.2f, 0.2f, 1.0f};
    GLfloat g_light_position[] = {-1.5f, 1.0f, -4.0f, 1.0f};
    GLfloat mat_shininess[] = {70.0};
    glClearDepth(1.0f);
    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LEQUAL);
    glShadeModel(GL_SMOOTH);
    glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);
    glEnable(GL_LIGHT0);
    glLightfv(GL_LIGHT0, GL_POSITION, g_light_position);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
}

void renderBitmapString(float x,float y,void *font,const char *string)
{
    const char *c;

    glRasterPos2f(x,y);
    for(c=string;*c!='\0';c++)
    {
        glutBitmapCharacter(font,*c);
    }
}

void setCamera()
{
    glTranslatef(0.0f, 0.0f, zoom);
    glTranslatef(camMoveX, 0.0f, 0.0f);
    glTranslatef(0.0, camMoveY, 0.0f);

    glRotatef(cameraX,1.0,0.0,0.0);
    glRotatef(cameraY,0.0,1.0,0.0);
    //glRotatef(cameraZ,0.0,0.0,1.0);
}

void background()
{
    glDisable( GL_LIGHTING );
    glBegin(GL_POLYGON);
  		glColor3f(0.7, 0.7, 0.7);
  		glVertex3f(10.0, -2.0, 10.0);
  		glVertex3f(10.0, -2.0, -10.0);
  		glVertex3f(-10.0, -2.0, -10.0);
  		glVertex3f(-10.0, -2.0, 10.0);
  	glEnd();
}

void balloon(float red, float green, float blue)
{
    glEnable(GL_LIGHTING);
    glLineWidth(2.0);
    glBegin(GL_LINES);
        glVertex3f(0.0,0.0,0.0);
        glVertex3f(0.0,-2.2,0.0);
    glEnd();
    GLfloat Color[] = {red, green, blue, 0.0};
    glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, Color);
    glutSolidSphere(0.8,80,32);
}

void text(void)
{
    glDisable( GL_LIGHTING );
    renderBitmapString(510,250,(void *)font1,"HAPPY");
    renderBitmapString(495,210,(void *)font1,"NEW YEAR");
    glColor3f(1.0,1.0,1.0);
    renderBitmapString(500,170,(void *)font2,"May this year bring new");
    renderBitmapString(500,150,(void *)font2,"happiness, new goals, new");
    renderBitmapString(500,130,(void *)font2,"achievements and a lot of new");
    renderBitmapString(500,110,(void *)font2,"inspirations on your life");
}

void reshape(GLsizei width, GLsizei height)
{
    if (height == 0)
        height = 1;
    GLfloat ar = (GLfloat)width / (GLfloat)height;
    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity() ;
}

void reshape2(int w,int h)
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, w, 0, h);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void display()
{
    double w = glutGet( GLUT_WINDOW_WIDTH );
    double h = glutGet( GLUT_WINDOW_HEIGHT );

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    setCamera();

    background();

    drawSnow();

    ///balloon
    glPushMatrix();
        glTranslatef(-2.0, posY+0.6, -2.0);
        balloon(1.0, 1.0, 0.0);
    glPopMatrix();

    glPushMatrix();
        glTranslatef(-1.0, posY+1.6, -2.0);
        balloon(1.0, 1.0, 1.0);
    glPopMatrix();

    glPushMatrix();
        glTranslatef(-1.0, posY, -2.0);
        balloon(0.4, 0.4, 0.4);
    glPopMatrix();

    glPushMatrix();
        glTranslatef(0.1, posY+0.4, -2.0);
        balloon(0.8, 0.4 ,0.1);
    glPopMatrix();

    //reshape2(w,h);
    //text();

    glutSwapBuffers();
}

void timer(int value)
{
    static bool flag = true;
    static int count = 5;

    if(count==10)
        flag=false;

    if (count==0)
        flag=true;

    if(flag)
    {
        posY+=0.03;
        count++;
    }

    else
    {
        posY-=0.03;
        count--;
    }
    glutPostRedisplay();
    glutTimerFunc(refreshMills, timer, 0);
}

void keyInput(int key, int x, int y)
{
    switch(key)
    {
        case GLUT_KEY_UP:
            cameraX -= 0.5;
            glutPostRedisplay();
            break;
        case GLUT_KEY_LEFT:
            cameraY -= 0.5;
            glutPostRedisplay();
            break;
        case GLUT_KEY_DOWN:
            cameraX += 0.5;
            glutPostRedisplay();
            break;
        case GLUT_KEY_RIGHT:
            cameraY += 0.5;
            glutPostRedisplay();
            break;
        case 27:
            exit(0);
            break;
        case 32:
            cameraX = cameraY = 0;
            glutPostRedisplay();
            break;
        default:
            break;
    }
}

void keyboard(unsigned char key, int x, int y)
{
    switch(key)
    {
        case 'o':
            zoom += 0.5;
            glutPostRedisplay();
            break;
        case 'u':
            zoom -= 0.5;
            glutPostRedisplay();
            break;
        case 'i':
            camMoveY -= 0.5;
            glutPostRedisplay();
            break;
        case 'k':
            camMoveY += 0.5;
            glutPostRedisplay();
            break;
        case 'j':
            camMoveX += 0.5;
            glutPostRedisplay();
            break;
        case 'l':
            camMoveX -= 0.5;
            glutPostRedisplay();
            break;
        case 27:
            exit(0);
            break;
        case 32:
            camMoveX = cameraY = 0;
            zoom = -6;
            glutPostRedisplay();
            break;
        default:
            break;
    }
}

void idle ( )
{
  glutPostRedisplay();
}

int main(int argc,char**argv)
{
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB|GLUT_DEPTH);
    glutInitWindowPosition(100,100);
    glutInitWindowSize(920,520);
    glutCreateWindow("New Year Card");
    init();
    Init();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    //glutReshapeFunc(reshape2);
    glutIdleFunc(idle);
    glutSpecialFunc(keyInput);
    glutKeyboardFunc(keyboard);
    glutTimerFunc(200,timer,0);
    glutMainLoop();
    return 0;
}
