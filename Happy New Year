#include <windows.h>
#include <GL/glut.h>
//#include <stdlib.h>
#include <math.h>

#define MaxSnowParticles 500
#define M_PI (3.1415926535897932384626433832795)
#define MAX_FIREWORK_POINTS 1750

const int font1=(int)GLUT_BITMAP_TIMES_ROMAN_24;
const int font2=(int)GLUT_BITMAP_TIMES_ROMAN_10;

double refreshMills = 100;
double rotateX = 0.0;
double rotateY = 0.0;
float zoom = -10.0;
float translateX = 0.0;
float translateY = 0.0;
float posY = 0.4;

float velocity = 0.0;

int numPoints;
GLfloat firework_curx, firework_cury;
GLfloat x[MAX_FIREWORK_POINTS];
GLfloat y[MAX_FIREWORK_POINTS];
GLfloat xacc[MAX_FIREWORK_POINTS];
GLfloat yacc[MAX_FIREWORK_POINTS];
GLfloat red, green, blue;
int step;
int length;

int ptcl=0;

struct particles
{
    bool alive;
    float life;
    float fade;

    //snow position
    float snow_x;
    float snow_y;
    float snow_z;

    float vel;
    float gravity;
};

particles Snow[MaxSnowParticles];

void initParticles(int i)
{
    Snow[i].alive = true;
    Snow[i].life = 1.0;
    Snow[i].fade = float(rand()%100)/1000.0f + 0.003f;

    Snow[i].snow_x = (float) (rand() % 30) - 15;
    Snow[i].snow_y = 10.0;
    Snow[i].snow_z = (float) (rand() % 15);

    Snow[i].vel = velocity;
    Snow[i].gravity = 0.5 + (float) (rand() % 1);
}

void initSnow()
{
    glShadeModel(GL_SMOOTH);
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glClearDepth(1.0);
    glEnable(GL_DEPTH_TEST);

    for (int i=0; i<MaxSnowParticles; i++)
    {
        initParticles(i);
    }
}

//Draw snow
void drawSnow()
{
    float x, y, z;
    for (int i=0; i<MaxSnowParticles; i++)
    {
        if (Snow[i].alive == true)
        {
            x = Snow[i].snow_x;
            y = Snow[i].snow_y;
            z = Snow[i].snow_z + zoom;

            glDisable(GL_LIGHTING);
            glColor3f(1.0, 1.0, 1.0);
            glPushMatrix();
            glTranslatef(x, y, z);
            glutSolidSphere(0.1, 20, 20);
            glPopMatrix();

            //Move
            Snow[i].snow_y += Snow[i].vel / 1500;
            Snow[i].vel -= Snow[i].gravity;
            //Decay
            Snow[i].life -= Snow[i].fade;

            if (Snow[i].snow_y <= -5.0)
            {
                Snow[i].life = -1.0;
            }

            //Revive
            if (Snow[i].life < 0.0)
            {
                initParticles(i);
            }
        }
    }
}

//Get random number
double random()
{
    return (rand()%10000)/10000.0;
}

void initialize()
{
    double temp1, temp2;
    //Randomize firework points
    numPoints = random()*(MAX_FIREWORK_POINTS);
    //Randomize firework position
    firework_curx = -1.5 + (float) (rand() % 4);
    firework_cury = 0.4 + random();

    //Randomize firework color
    red = 0.5 + 0.5*random();
    green = 0.5 + 0.5*random();
    blue = 0.5 + 0.5*random();
    glPointSize(1.0);
    step = 0;
    length = 500 + 300*random();

    for (int i=0 ; i<numPoints ; i++)
    {
        x[i] = firework_curx;
        y[i] = firework_cury;
        temp1 = random();
        temp2 = random()*2.0*M_PI;
        xacc[i] = (cos(temp2)*temp1)/length;
        yacc[i] = (sin(temp2)*temp1)/length;
    }
}

void draw_blast(void)
{
    int i;
    glDisable(GL_LIGHTING);
    glColor3f(red, green, blue);
    //Move the firework behind the card scenery
    glTranslatef(0.0, 0.0, -1.0);
    glBegin(GL_POINTS);
        for (i=0;i<numPoints;i++)
        {
            x[i] += xacc[i];
            y[i] += yacc[i];
            glVertex2d(x[i], y[i]);
        }
    glEnd();
}

void init()
{
    glClearColor(0.0f, 0.5f, 2.0f, 0.0f);
    GLfloat mat_specular[]={1.0f, 1.0f, 1.0f, 1.0f} ;
    GLfloat g_light_position[] = {-1.5f, 1.0f, -4.0f, 1.0f};
    GLfloat mat_shininess[] = {70.0};
    glClearDepth(1.0f);
    glDepthFunc(GL_LEQUAL);
    glShadeModel(GL_SMOOTH);
    glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);
    glEnable(GL_LIGHT0);
    glLightfv(GL_LIGHT0, GL_POSITION, g_light_position);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
}

void renderBitmapString(float x,float y,void *font,const char *string)
{
    const char *c;

    glRasterPos2f(x,y);
    for(c=string;*c!='\0';c++)
    {
        glutBitmapCharacter(font,*c);
    }
}

void setCamera()
{
    glTranslatef(0.0f, 0.0f, zoom);
    glTranslatef(translateX, 0.0f, 0.0f);
    glTranslatef(0.0, translateY, 0.0f);
    glRotatef(rotateX,1.0,0.0,0.0);
    glRotatef(rotateY,0.0,1.0,0.0);
}
//Draw rectangle for city apartments
void rectangle(float x1,float x2, float y1, float y2)
{
    glBegin(GL_POLYGON);
        glVertex3f(x1, y1,-5.0);
        glVertex3f(x2, y1,-5.0);
        glVertex3f(x2, y2,-5.0);
        glVertex3f(x1, y2,-5.0);
    glEnd();
}
//Draw city
void city()
{
    glDisable(GL_LIGHTING);
    //House
    //1
    glColor3f(0.3,0.3, 0.3);
    rectangle(-5.0,-4.0,-3.0,0.2);
    //2
    glColor3f(0.3,0.3, 0.4);
    rectangle(-4.0,-3.0,-3.0,-1.0);
    //3
    glColor3f(0.4,0.3, 0.3);
    rectangle(-3.0,-2.5,-3.0,0.0);
    //4
    glColor3f(0.3,0.4, 0.3);
    rectangle(-2.5,-1.5,-3.0,-0.7);
    //5
    glColor3f(0.3,0.3, 0.4);
    rectangle(-1.5,-0.5,-3.0,-1.0);
    //6
    glColor3f(0.3,0.3, 0.3);
    rectangle(-0.5,0.5,-3.0,0.2);
    //7
    glColor3f(0.4,0.5, 0.4);
    rectangle(0.5,2.5,-3.0,2.0);
    //8
    glColor3f(0.3,0.3, 0.3);
    rectangle(2.5,3.5,-3.0,1.0);
    //9
    glColor3f(0.4,0.3, 0.3);
    rectangle(3.5,4.5,-3.0,-1.0);

    //Window
    glColor3f(1.0,1.0,0.0);
    //1
    rectangle(-4.5,-4.1,0.0,-0.5);
    rectangle(-4.5,-4.1,-0.6,-1.0);
    //2
    rectangle(-3.9,-3.6,-2.0,-1.2);
    //3
    rectangle(-2.9,-2.8,-0.8,-0.6);
    rectangle(-2.9,-2.8,-0.5,-0.4);
    rectangle(-2.7,-2.6,-0.8,-0.6);
    rectangle(-2.7,-2.6,-0.5,-0.4);
    rectangle(-2.9,-2.8,-0.3,-0.1);
    rectangle(-2.9,-2.8,-1.0,-1.1);
    rectangle(-2.7,-2.6,-0.3,-0.1);
    rectangle(-2.7,-2.6,-1.0,-1.1);
    //4
    rectangle(-2.4,-2.1,-1.3,-1.0);
    rectangle(-1.9,-1.6,-1.3,-1.0);
    rectangle(-2.4,-2.1,-0.9,-1.8);
    rectangle(-1.9,-1.6,-0.9,-1.8);
    rectangle(-2.4,-2.1,-1.9,-2.2);
    rectangle(-1.9,-1.6,-1.9,-2.2);
    //5
    rectangle(-0.6,-1.0,-1.1,-1.6);
    //6
    rectangle(-0.4,0.0,0.0,-0.6);
    rectangle(-0.4,0.0,-0.5,-0.1);
    //7
    rectangle(0.6,1.5,1.8,1.0);
    rectangle(0.6,1.5,0.9,0.1);
    //8
    rectangle(3.4,3.0,0.9,0.5);
    rectangle(3.4,3.0,0.4,0.0);
    //9
    rectangle(4.4,4.0,-1.1,-1.5);
}
//Draw background
void background()
{
    //Floor
    glBegin(GL_POLYGON);
        glColor3f(0.0, 0.0, 0.2);
        glVertex3f(10.0, -3.0, 5.0);
        glVertex3f(10.0, -3.0, -5.0);
        glVertex3f(-10.0, -3.0, -5.0);
        glVertex3f(-10.0, -3.0, 5.0);
    glEnd();
}
//Draw balloon
void balloon(float red, float green, float blue)
{
    //balloon rope
    glBegin(GL_LINES);
        glVertex3f(0.0,0.0,0.0);
        glVertex3f(0.0,-2.2,0.0);
    glEnd();
    glEnable(GL_LIGHTING);
    GLfloat Color[] = {red, green, blue, 0.0};
    glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, Color);
    glutSolidSphere(0.8,80,32);
}
//Draw text
void text(void)
{
    glDisable( GL_LIGHTING );
    glColor3f(1.0,0.0,0.0);
    renderBitmapString(650,415,(void *)font1,"HAPPY");
    renderBitmapString(630,385,(void *)font1,"NEW YEAR");
    glColor3f(1.0,1.0,1.0);
    renderBitmapString(645,360,(void *)font2,"May this year bring new");
    renderBitmapString(642,347,(void *)font2,"happiness, new goals, new");
    renderBitmapString(636,334,(void *)font2,"achievements and a lot of new");
    renderBitmapString(645,321,(void *)font2,"inspirations on your life");
}

void reshape1(int w,int h)
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f,w /h, 1.0f, 100.0f);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity() ;
}

void reshape2(int w,int h)
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, w, 0, h);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void reshape3(int w, int h)
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-1.0*(GLfloat)w/(GLfloat)h, 1.0*(GLfloat)w/(GLfloat)h, -1.0, 1.0, -1.0, 1.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity() ;
}

void resize(int w,int h)
{
    if (h == 0) h = 1;
        glViewport(0, 0, w, h);
}
//Draw firework
void firework()
{
    if (step < 0.5*length)
    {
        for (int i=0; i<numPoints; i++)
        yacc[i] -= 0.008 / length; // gravity
        draw_blast();
    }
    step ++;
    if (step > length)
        initialize();
}

void display()
{
    double w = glutGet( GLUT_WINDOW_WIDTH );
    double h = glutGet( GLUT_WINDOW_HEIGHT );

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    reshape1(w,h);
    setCamera();
    //Draw background
    background();
    //Draw city
    city();
    //Draw balloon
    glPushMatrix();
        glTranslatef(-2.0, posY+0.6, -2.0);
        balloon(1.0, 1.0, 0.0);
    glPopMatrix();

    glPushMatrix();
        glTranslatef(-1.0, posY+1.6, -2.0);
        balloon(1.0, 1.0, 1.0);
    glPopMatrix();

    glPushMatrix();
        glTranslatef(-1.0, posY, -2.0);
        balloon(0.4, 0.4, 0.4);
    glPopMatrix();

    glPushMatrix();
        glTranslatef(0.1, posY+0.7, -2.0);
        balloon(0.8, 0.4 ,0.1);
    glPopMatrix();

    if(ptcl == 1)
    {
        drawSnow();
    }
    else if(ptcl == 2)
    {
        reshape3(w,h);
        firework();
    }
    //Draw text
    reshape2(w,h);
    text();
    glutSwapBuffers();
}

void timer(int value)
{
    static bool flag = true;
    static int count = 5;

    if(count==10)
        flag=false;

    if (count==0)
        flag=true;
    //Balloon animation move up
    if(flag)
    {
        posY+=0.03;
        count++;
    }
    //Balloon animation move down
    else
    {
        posY-=0.03;
        count--;
    }
    glutTimerFunc(refreshMills, timer, 0);
}

void keyboard_arrow(int key, int x, int y)
{
    switch(key)
    {
        //Tilt up
        case GLUT_KEY_UP:
            rotateX -= 0.5;
            break;
        //Rotate the perspective clockwise in x direction
        case GLUT_KEY_LEFT:
            rotateY -= 0.5;
            break;
        //Tilt down
        case GLUT_KEY_DOWN:
            rotateX += 0.5;
            break;
        //Rotate the perspective counter clockwise in x direction
        case GLUT_KEY_RIGHT:
            rotateY += 0.5;
            break;
        default:
            break;
    }
}

void keyboard(unsigned char key, int x, int y)
{
    switch(key)
    {
        //Snow alive
        case 's':
            if(ptcl!=1) ptcl = 1;
            else ptcl = 0;
            break;
        //Firework alive
        case 'f':
            if(ptcl!=2) ptcl = 2;
            else ptcl = 0;
            break;
        //Move down
        case 'k':
            translateY += 0.5;
            break;
        //Move up
        case 'i':
            translateY -= 0.5;
            break;
        //Move right
        case 'j':
            translateX += 0.5;
            break;
        //Move left
        case 'l':
            translateX -= 0.5;
            break;
        case 27:
            exit(0);
            break;
        default:
            break;
    }
}

//Zoom the card
void mouse(int button, int state, int x, int y)
{
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        //Zoom in
        zoom += 0.5;
        glutPostRedisplay();
    }
    else if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
    {
        //Zoom out
        zoom -= 0.5;
        glutPostRedisplay();
    }
}

void idle()
{
    glutPostRedisplay();
}

int main(int argc,char**argv)
{
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB|GLUT_DEPTH);
    glutInitWindowPosition(100,100);
    glutInitWindowSize(820,520);
    glutCreateWindow("New Year Card - SWE1909915/Febryana Riona SWE1909916/Forodes Fiona");
    init();
    initSnow();
    glutDisplayFunc(display);
    glutReshapeFunc(resize);
    glutIdleFunc(idle);
    glutSpecialFunc(keyboard_arrow);
    glutKeyboardFunc(keyboard);
    glutMouseFunc(mouse);
    glutTimerFunc(200,timer,0);
    glutMainLoop();
    return 0;
}
